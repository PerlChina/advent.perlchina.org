=for advent_year 2009

=for advent_day XX

=for advent_title Perl 开发环境建议

=for advent_author cnhackTNT

尽管几乎所有的 Linux/Unix 发行版都附带了 Perl 和相关的模块，但作为一个 Perl 开发者，在构建自己的开发环境时，有些很好的习惯可以遵循，这样不会因为安装和尝试各种模块的时候将你的系统搞脏，也不需要你动不动就祭出 root 大神往系统目录里写文件等等。
昨天 Fayland 给我们介绍了非常方便的 M<local::lib> 模块，你当然可以按照他介绍的方法来管理需要自己额外安装的模块，但对于想搭建自己得心应手的 Perl 开发环境的同学，我这里有另一种比较好的建议。
首先，大部分 Linux/Unix 发行版（我不是歧视温道士系统，只是我个人不用它作为开发环境）都是追求稳定的，A<http://www.ubuntu.com|Ubunut> 也才升到 perl5.10 不久，而我使用的 A<http://www.gentoo.org|Gentoo>, 其上的 perl5.10 至今都还被 Mask 着呢。对于 Perl 来说，新的版本不但有 bug 的修复，性能上的提升，还有很多新特性被加入进来，之前 A<http://agentzh.spaces.live.com|agentzh> 对 perl5.10 的某个版本有过测试，结果是存在比较明显的内存泄漏，而换用最新开发版中的 5.11 版本，这些问题就不存在了。而且生产环境证明，perl 最新的 devel 版本还是比较靠谱的，因此对于 perl 开发者，我强烈建议您自己编译一套 A<http://www.cpan.org/src/perl-5.11.2.tar.gz|perl5.11.2>， 这样做的好处主要有几点：

1. 你可以享受到最新 perl 版本带来的一系列优势，包括 bug 的修复，新特性的支持，性能的提升等。
2. 你可以根据需要调整你的 perl 编译参数，以达到关闭/开启某些特性和优化编译的目的。
3. 你可以打造一个干净的 perl 版本，除了核心模块外，其他的模块你可以根据项目需要来安装，批量部署的时候（系统体系相同的情况下），大部分时候你只需要把自己指定的这个 perl 版本的目录整个 COPY 过去就OK了。
4. 与系统自带的 perl 完全独立，你对自己编译的 perl 做的动作完全不会影响到系统自带的 perl，这样你的系统不会因为自带的 perl 或其模块被改动，而在升级的时候碰到问题。
5. 你可以在系统自带的 perl 和自己编译的 perl 间自由切换 :-).

那么，接下来让我们看看如何来打造一个自己的 Perl 开发环境吧!
首先，我们需要下载最新的 Perl 源码，你可以选择同步 perl.org 上 A<http://perl5.git.perl.org/perl.git|git 仓库中的 Perl 源码>，也可以选择使用官方打包好的 A<http://www.cpan.org/src/perl-5.11.2.tar.gz|5.11.2 版本>。我们以后者为例：

=begin pre

$ wget http://www.cpan.org/src/perl-5.11.2.tar.gz
$ tar xzvf perl-5.11.2.tar.gz
$ cd perl-5.11.2
$ ./Configure

=end pre

接下来，请根据提示按照自己的需求来配置和编译你的 perl。你可以选择跟随 Configure 脚本来交互式地完成这一过程，当然在你比较熟悉这一过程的情况下，也可以直接给出你的配置参数免得浪费时间：

=begin pre

$ ./Configure

=end pre

=begin codeNNN


=end codeNNN

=begin codeNNN

=end codeNNN
